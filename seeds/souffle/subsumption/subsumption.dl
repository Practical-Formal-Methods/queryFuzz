

.type Interval = [lower:number, upper:number]

.type IntervalList = [head:Interval, tail:IntervalList]

.decl A(l:number, u:number)

A(0,1000).
A(1, 10).
A(1, 99).
A(100, 200).
A(200, 300).
A(1200, 1201).
A(1202, 1209).
A(1209, 1222).


.decl less(x:Interval, y:Interval) // fuzzable relation
less([l1,u1],[l2,u2]) :-   A(l1,u1),  A(l2,u2),  l1 < l2.

less([l1,u1],[l2,u2]) :-   A(l1,u1),  A(l2,u2),  l1 = l2,  u1 < u2.


.decl leg(x:Interval, y:Interval) // fuzzable relation
leg(x,z) :-  less(x,y),  less(y,z).


.decl succ(x:Interval, y:Interval) // fuzzable relation
succ(x,y) :-  less(x,y),  !leg(x,y).


.decl first(x: Interval) // fuzzable relation
first([l,u]) :-  A(l,u),  !less(_,[l,u]).


.decl last(x: Interval) // fuzzable relation
last([l,u]) :-  A(l,u),  !less([l,u],_).


.decl normalized(x:Interval, l:IntervalList)

// base case
normalized(x,[x,nil]) :-   first(x).

// previous and current interval are disjoint, i.e. no overlap
normalized(y,[y,list]) :-   normalized(x,list),   succ(x,y),   list = [i, tail],   i = [l1, u1],   y = [l2, u2],   u1 + 1 < l2.



normalized(y,[[l1,u2],tail]) :-   normalized(x,list),   succ(x,y),   list = [i, tail],   i = [l1, u1],   y = [l2, u2],   u1 + 1 >= l2,   l1 < l2.

// current interval is subsumed by previous
normalized(y,list) :-   normalized(x,list),   succ(x,y),   list = [i, tail],   i = [l1, u1],   y = [l2, u2],   u1 + 1 >= l2,   l1 >= l2.

// unwind list & dump in a relation

.decl B(l:number, u:number, list:IntervalList)
B(l, u, list) :-   last(x),   normalized(x, list),   list = [i, tail],   i = [l, u].

B(l, u, tail) :-   B(_, _, list),   list = [i, tail],   i = [l, u].

// projection of B
.decl C(l:number, u:number)
C(l,u) :-   B(l,u,_).

// output
.output C
