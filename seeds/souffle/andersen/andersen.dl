
.type var <: symbol

// Take addresses of other variables, i.e., y = &x;
.decl AddressOf(y:var, x:var) // fuzzable relation 
.input AddressOf()

// Assign Statements, i.e.,  y = x;
.decl Assign(y:var, x:var) // fuzzable relation
.input Assign()

// Load Statements, i.e., y = *x;
.decl Load(y:var, x:var) // fuzzable relation
.input Load()

// Store Statements, i.e., *y = x;
.decl Store(y:var, x:var) // fuzzable relation
.input Store()

// PointsTo Relation, i.e., whether y may point to x
.decl PointsTo(y:var, x:var) // fuzzable relation
.output PointsTo()

PointsTo(y, x) :- AddressOf(y, x).

PointsTo(y, x) :- Assign(y, z), PointsTo(z, x).


PointsTo(y, w) :- Load(y, x), PointsTo(x, z), PointsTo(z, w).

PointsTo(z, w) :- Store(y, x), PointsTo(y, z), PointsTo(x, w).
